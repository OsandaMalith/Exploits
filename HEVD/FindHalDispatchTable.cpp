// HalDispatchTable.cpp : Defines the entry point for the console application.
//

#include "stdafx.h"
#include <stdio.h>
#include <Windows.h>

#define MAXIMUM_FILENAME_LENGTH 255 

typedef struct SYSTEM_MODULE {
	ULONG                Reserved1;
	ULONG                Reserved2;
	PVOID                ImageBaseAddress;
	ULONG                ImageSize;
	ULONG                Flags;
	WORD                 Id;
	WORD                 Rank;
	WORD                 w018;
	WORD                 NameOffset;
	BYTE                 Name[MAXIMUM_FILENAME_LENGTH];
}SYSTEM_MODULE, *PSYSTEM_MODULE;

typedef struct SYSTEM_MODULE_INFORMATION {
	ULONG                ModulesCount;
	SYSTEM_MODULE        Modules[1];
} SYSTEM_MODULE_INFORMATION, *PSYSTEM_MODULE_INFORMATION;

typedef enum _SYSTEM_INFORMATION_CLASS {
	SystemModuleInformation = 11,
	SystemHandleInformation = 16
} SYSTEM_INFORMATION_CLASS;

typedef NTSTATUS(WINAPI *PNtQuerySystemInformation)(
	__in SYSTEM_INFORMATION_CLASS SystemInformationClass,
	__inout PVOID SystemInformation,
	__in ULONG SystemInformationLength,
	__out_opt PULONG ReturnLength
	);


int _tmain(int argc, _TCHAR* argv[])
{
	ULONG len = 0;
	PSYSTEM_MODULE_INFORMATION pModuleInfo;

	HMODULE ntdll = GetModuleHandle(L"ntdll");
	PNtQuerySystemInformation query = (PNtQuerySystemInformation)GetProcAddress(ntdll, "NtQuerySystemInformation");
	if (query == NULL){
		wprintf(L"[!] GetModuleHandle Failed\n");
		return 1;
	}
	
	query(SystemModuleInformation, NULL, 0, &len);

	pModuleInfo = (PSYSTEM_MODULE_INFORMATION)GlobalAlloc(GMEM_ZEROINIT, len);
	if (pModuleInfo == NULL){
		wprintf(L"[!] Failed to allocate memory\n");
		return 1;
	}
	query(SystemModuleInformation, pModuleInfo, len, &len);
	if (!len){
		wprintf(L"[!] Failed to retrieve system module information\n");
		return 1;
	}
	PVOID kernelImageBase = pModuleInfo->Modules[0].ImageBaseAddress;
	PCHAR kernelImage = (PCHAR)pModuleInfo->Modules[0].Name;

	kernelImage = strrchr(kernelImage, '\\') + 1;

	wprintf(L"[+] Kernel Image name %S\n", kernelImage);
	wprintf(L"[+] Kernel Image Base %p\n", kernelImageBase);

	HMODULE KernelHandle = LoadLibraryA(kernelImage);
	wprintf(L"[+] Kernel Handle %p\n", KernelHandle);
	PVOID HALUserLand = (PVOID)GetProcAddress(KernelHandle, "HalDispatchTable");
	wprintf(L"[+] HalDispatchTable userland %p\n", HALUserLand);

	PVOID HalDispatchTable = (PVOID)((ULONG)HALUserLand - (ULONG)KernelHandle + (ULONG)kernelImageBase);

	wprintf(L"[~] HalDispatchTable Kernel %p\n", HalDispatchTable);

	return 0;
}
//EOF
